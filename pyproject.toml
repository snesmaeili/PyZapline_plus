[build-system]
requires = ["setuptools>=69", "setuptools-scm>=8", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pyzaplineplus"
description = "Adaptive removal of spectral line-noise in EEG via DSS (Zapline-plus reimplementation)."
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.8"
license = { text = "MIT" }
authors = [
  { name = "Sina Esmaeili", email = "sina.esmaeili@umontreal.ca" }
]
keywords = ["EEG", "MEG", "BCI", "DSS", "line noise", "zapline"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Information Analysis",
]
dependencies = [
  "numpy>=1.22",
  "scipy>=1.8",
  "scikit-learn>=1.1",
  "matplotlib>=3.5",
]
dynamic = ["version"]

[project.optional-dependencies]
mne = ["mne>=1.0"]
dev = [
  "pytest>=8",
  "pytest-cov>=5",
  "ruff>=0.5",
  "mypy>=1.10",
  "build>=1.2",
  "twine>=5.1",
  "check-manifest>=0.49",
  "mkdocs>=1.6",
  "mkdocs-material>=9.5",
  "mkdocstrings[python]>=0.24",
]

[project.urls]
Homepage = "https://github.com/snesmaeili/PyZapline_plus"
Documentation = "https://snesmaeili.github.io/PyZapline_plus/"
Source = "https://github.com/snesmaeili/PyZapline_plus"
Issues = "https://github.com/snesmaeili/PyZapline_plus/issues"

[tool.setuptools]
# Keeping current (non-src) layout

[tool.setuptools.packages.find]
where = ["."]
include = ["pyzaplineplus*"]

[tool.setuptools.package-data]
pyzaplineplus = ["py.typed"]

[tool.setuptools_scm]
version_scheme = "no-guess-dev"
local_scheme = "node-and-date"
tag_regex = "^v?(?P<version>\\d+\\.\\d+\\.\\d+(?:[a-zA-Z0-9\\.\\-]+)?)$"
fallback_version = "0.0.0"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers --disable-warnings --cov=pyzaplineplus --cov-report=term-missing"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "E402",  # allow module import not at top (needed for examples)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "I001",  # allow unsorted imports (CI formats)
    "W293",  # blank line contains whitespace (CI formats)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.coverage.run]
source = ["pyzaplineplus"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
